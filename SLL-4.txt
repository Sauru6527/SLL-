#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
struct node
{
	int data;
	struct node* next;
};

void Insert_First();
void Display();
void Insert_Last();
int Count();
void Delete_First();
void Delete_Last();
void Insert_Between();
void Delete_Between();
void Search();

struct node* head = NULL;

int main()
{
	int choice,ret;
	while(1)
	{
		puts("***Singly Linear Linked List***");
		puts("1.Insert First");
		puts("2.Insert Last");
		puts("3.Insert Between");
		puts("4.Delete First");
		puts("5.Delete Last");
		puts("6.Delete Between");
		puts("7.Display");
		puts("8.Count");
		puts("9.Search");
		puts("10.Exit");
		
		printf("Enter Your Choice = ");
		scanf("%d",&choice);
		
		switch(choice)
		{
			case 1:
					Insert_First();
					break;
			case 2:
					Insert_Last();
					break;
			case 3:
					Insert_Between();
					break;
			case 4:
					Delete_First();
					break;
			case 5:
					Delete_Last();
					break;
			case 6:
					Delete_Between();
					break;
			case 7:
					Display();
					break;
			case 8:
				    ret = Count();
				    printf("Total Nodes in List = %d\n",ret);
					break;
			case 9:
					Search();
					break;
			case 10:
					return 0;
		}
	}
	return 0;
}


void Search()
{
	struct node* temp = head;
	int value = 0,flag = 0;
	
	printf("Enter Value to be search = ");
	scanf("%d",&value);
	
	
	if(head==NULL)
	{
		printf("List is Empty\n");
	}
	else
	{
		while(temp!=NULL)
		{
			if(value==temp->data)
			{
				printf("Value Found\n");
				break;
			}
			temp = temp->next; 
		}
		if(temp==NULL)  
		{
			printf("Value not Found\n");
		}
		
	}
	return;
}

void Delete_Between()
{
	struct node* temp = head;
	struct node* temp1 = NULL;
	int pos = 0;
	
	printf("Enter Position = ");
	scanf("%d",&pos);
	
	if(pos<1 || pos > Count())
	{
		printf("Invalid Position\n");
		return;
	}	
	
	if(pos==1)
	{
		if(head==NULL)   //List Is Empty
		{
			printf("List is Empty..Can delete\n");
		}
		else if(head->next==NULL) //Only one node present
		{
			free(temp);
			head = NULL;
		}
		else
		{
			head = head->next;
			free(temp);
		}
	}
	else if(pos==Count())
	{
		while(temp->next->next!=NULL)
		{
			temp = temp->next;
		}
		free(temp->next);
		temp->next = NULL;
	}
	else
	{
		while(pos>2)
		{
			temp = temp->next;
			pos--;
		}
		temp1 = temp->next;
		temp->next = temp1->next;
		free(temp1);
	}
	return;
}

void Insert_Between()
{
	struct node* ptr = NULL;
	struct node* temp = head;
	int value,pos;
	
	ptr = (struct node*)malloc(sizeof(struct node));
	
	if(ptr==NULL)
	{
		printf("Memory allocation failed\n");
		return;
	}
	
	printf("Enter Position = ");
	scanf("%d",&pos);
	
	if(pos<1 || pos > Count()+1)
	{
		printf("Invalid Position\n");
		return;
	}
	
	printf("Enter Value = ");
	scanf("%d",&value);
	
	ptr->data = value;
	ptr->next = NULL;
	
	if(pos==1)
	{
		if(head==NULL) //Linked list is Empty
		{
			head = ptr;
		}
		else //List is not empty
		{
			ptr->next = head;
			head = ptr;
		}	
	}
	else if(pos==Count()+1)
	{
		while(temp->next!=NULL)
		{
			temp = temp->next;
		}
		temp->next = ptr;	
	}
	else
	{
		while(pos>2)
		{
			temp = temp->next;
			pos--;
		}
		ptr->next = temp->next;
		temp->next= ptr;
	}
	return;
}





//Delete Last using two Pointer

/*
void Delete_Last()
{
	struct node* temp = head;
	struct node* temp1 = NULL;
	
	while(temp->next!=NULL)
	{
		temp1 = temp;  
		temp = temp->next;
	}
	free(temp);
	temp1->next = NULL;
}
	

*/

void Delete_Last()
{
	struct node* temp = head;
	
	if(head==NULL)
	{
		printf("List is Empty\n");
	}
	else if(head->next==NULL) 
	{
		free(temp);
		head = NULL;
	}
	else
	{
		while(temp->next->next!=NULL)
		{
			temp = temp->next;
		}
		free(temp->next);
		temp->next = NULL;
	}
	return;
}

void Delete_First()
{
	struct node* temp = head;
	
	if(head==NULL)   //List Is Empty
	{
		printf("List is Empty..Can delete\n");
	}
	else if(head->next==NULL) //Only one node present
	{
		free(temp);
		head = NULL;
	}
	else
	{
		head = head->next;
		free(temp);
	}
	return;
}

void Insert_First()
{
	struct node* ptr = NULL;
	int value = 0;
	
	ptr = (struct node*)malloc(sizeof(struct node));
	
	if(ptr==NULL)
	{
		printf("Memory allocation failed\n");
		return;
	}
	
	printf("Enter Value = ");
	scanf("%d",&value);
	
	ptr->data = value;
	ptr->next = NULL;
	
	if(head==NULL) //Linked list is Empty
	{
		head = ptr;
	}
	else //List is not empty
	{
		ptr->next = head;
		head = ptr;
	}
	return;
}

void Display()
{
	struct node* temp = head;
	if(head == NULL)//List is Empty
	{
		printf("List is Empty\n");
	}
	else  //List is not empty
	{
		while(temp!=NULL)
		{
			printf("%d->",temp->data);
			temp = temp->next;	
		}	
		printf("\n");
	}
	return;
}

void Insert_Last()
{
	struct node* ptr = NULL;
	struct node* temp = head;
	int value = 0;
	
	ptr = (struct node*)malloc(sizeof(struct node));
	
	if(ptr==NULL)
	{
		printf("Memory allocation failed\n");
		return;
	}
	
	printf("Enter Value = ");
	scanf("%d",&value);
	
	ptr->data = value;
	ptr->next = NULL;
	
	if(head==NULL) //Linked list is Empty
	{
		head = ptr;
	}
	else
	{
		while(temp->next!=NULL)
		{
			temp = temp->next;
		}
		temp->next = ptr;	
	}
	return;
}

int Count()
{
	struct node* temp = head;
	int cnt = 0;
	if(head != NULL)//List is Empty
	{
		while(temp!=NULL)
		{
			cnt++;
			temp = temp->next;	
		}	
	}
	return cnt;
}



